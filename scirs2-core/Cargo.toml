[package]
name = "scirs2-core"
version = "0.1.0"
edition = "2021"
authors = ["SciRS2 Team"]
description = "Core utilities and common functionality for SciRS2"
license = "MIT OR Apache-2.0"
repository = "https://github.com/cool-japan/scirs"
keywords = ["scientific", "mathematics", "science", "scipy", "numerical"]
categories = ["science", "mathematics", "algorithms"]

[dependencies]
# Core dependencies
ndarray = { version = "0.16.1", features = ["serde", "rayon"] }
num-traits = "0.2.19"
num-complex = "0.4.6"
thiserror = "2.0.12"
once_cell = "1.21.3"
cached = { version = "0.48.1", optional = true }  # Memoization and caching
chrono = { version = "0.4", features = ["serde"] }
rand = { workspace = true }
rand_distr = "0.5.1"
serde = { version = "1.0.219", features = ["derive"], optional = true }  # Serialization
serde_json = { version = "1.0", optional = true }  # JSON serialization
uuid = { version = "1.17.0", features = ["v4", "serde"] }  # Used for unique identifiers
tempfile = { version = "3.20.0", optional = true }  # For temporary files in memory_efficient
bincode = { version = "1.3.3", optional = true }  # For serialization in memory_efficient
memmap2 = { version = "0.9.5", optional = true }  # For memory-mapped arrays
regex = { version = "1.11.1", optional = true }  # For string pattern validation

# Feature-gated dependencies
wide = { version = "0.7.32", optional = true }  # SIMD acceleration
rayon = { version = "1.10.0", optional = true }  # Parallel processing
crossbeam = { version = "0.8.4", optional = true }  # Used in parallel scheduler for channels
crossbeam-utils = { version = "0.8.19", optional = true }  # Used in parallel scheduler
crossbeam-deque = { version = "0.8.3", optional = true }  # Used in parallel scheduler
num_cpus = { version = "1.16.0", optional = true }  # CPU count detection

# Compression libraries
lz4 = { version = "1.24", optional = true }   # LZ4 compression
zstd = { version = "0.13.3", optional = true }  # Zstandard compression
snap = { version = "1.1.0", optional = true }   # Snappy compression
flate2 = { version = "1.0", optional = true }  # DEFLATE compression
bytemuck = { version = "1.16", features = ["derive"], optional = true }  # Zero-copy type casting

# System monitoring for resource-aware prefetching
libc = { version = "0.2.174", optional = true }  # System calls for resource monitoring
sysinfo = { version = "0.35.2", optional = true }  # System information gathering

# BLAS/LAPACK dependencies for linear algebra operations
# Note: BLAS backend selection is now handled at workspace level with platform-specific defaults
ndarray-linalg = { version = "0.17.0", optional = true, default-features = false }  # LAPACK bindings for ndarray

# BLAS backend dependencies - optional and feature-gated
openblas-src = { workspace = true, optional = true }
blas-src = { workspace = true, optional = true }
intel-mkl-src = { workspace = true, optional = true }

# JIT compilation for Array Protocol
cranelift-module = { workspace = true, optional = true }  # JIT compilation module
cranelift-jit = { workspace = true, optional = true }  # JIT compiler (previously simplejit)
cranelift-frontend = { workspace = true, optional = true }  # JIT compiler frontend

# Async runtime for async error handling
tokio = { workspace = true, optional = true }  # Async runtime for async error handling

# GPU backend dependencies
metal = { workspace = true, optional = true }  # Metal GPU backend for macOS
objc2-metal-performance-shaders = { workspace = true, optional = true }  # MPS integration for Metal

# Production-level feature dependencies
reqwest = { workspace = true, optional = true }  # HTTP client for tracing export
sha2 = { workspace = true, optional = true }  # Cryptographic hash functions

# Platform-specific BLAS backend configuration
# macOS: Use Accelerate framework by default (when linalg feature is enabled)
[target.'cfg(target_os = "macos")'.dependencies]
# For macOS, we don't include OpenBLAS dependencies - use system Accelerate framework

# Linux: OpenBLAS by default (when openblas feature is enabled)
[target.'cfg(target_os = "linux")'.dependencies]
openblas-src = { workspace = true, optional = true }
blas-src = { workspace = true, optional = true }

# Windows: OpenBLAS by default (when openblas feature is enabled)
[target.'cfg(target_os = "windows")'.dependencies]
openblas-src = { workspace = true, optional = true }
blas-src = { workspace = true, optional = true }

[dev-dependencies]
approx = { workspace = true }
criterion = { workspace = true }
tempfile = { workspace = true }
ndarray-rand = { workspace = true }

[features]
default = ["array", "serialization"]  # Enable array module by default
simd = ["wide"]  # SIMD operations
parallel = ["rayon", "ndarray/rayon", "crossbeam", "crossbeam-utils", "crossbeam-deque", "num_cpus"]  # Parallel processing with rayon
cache = ["cached"]  # Caching and memoization functionality
validation = ["regex"]  # Validation utilities
logging = []  # Structured logging and diagnostics
async = ["tokio"]  # Async error handling and recovery mechanisms
gpu = []  # GPU acceleration abstractions
cuda = ["gpu"]  # CUDA-specific GPU acceleration
opencl = ["gpu"]  # OpenCL-specific GPU acceleration
metal = ["gpu", "dep:metal", "dep:objc2-metal-performance-shaders"]  # Metal-specific GPU acceleration (Apple)
wgpu = ["gpu"]  # WebGPU-specific GPU acceleration
rocm = ["gpu"]  # ROCm-specific GPU acceleration (AMD)
memory_management = ["bincode", "tempfile"]  # Advanced memory management
memory_efficient = ["tempfile", "bincode", "memmap2", "rayon"]  # Memory-efficient operations
memory_efficient_all_types = ["memory_efficient", "float32", "float64", "all_ints"]  # Full type support for memory-efficient operations
float32 = []  # Support for f32 in zero-copy operations
float64 = []  # Support for f64 in zero-copy operations
int32 = []    # Support for i32 in zero-copy operations
int64 = []    # Support for i64 in zero-copy operations
uint32 = []   # Support for u32 in zero-copy operations
uint64 = []   # Support for u64 in zero-copy operations
all_ints = [] # Support for all integer types in zero-copy operations
memory_compression = ["memory_efficient", "lz4", "zstd", "snap", "flate2", "bytemuck", "serde", "serde_json", "libc", "num_cpus"]  # Compressed memory-mapped arrays
memory_metrics = ["memory_management", "serde", "serde_json"]  # Enhanced memory metrics tracking
sysinfo = ["dep:sysinfo"]  # System information gathering
serialization = ["serde", "serde_json"]  # Serialization support
array = []  # Scientific array types (MaskedArray, RecordArray)
memory_visualization = ["memory_metrics"]  # Memory usage visualization
memory_call_stack = ["memory_metrics"]  # Capture call stacks for memory events
profiling = []  # Performance profiling tools
random = []  # Random number generation utilities
types = []  # Type conversion utilities
ufuncs = []  # Universal Functions (ufuncs) system
testing = ["tempfile", "serde", "serde_json"]  # Testing framework for production systems
benchmarking = ["testing", "serde", "serde_json"]  # Comprehensive benchmarking system
linalg = ["ndarray-linalg"]  # Linear algebra with BLAS/LAPACK bindings
# LAPACK backends - Note: On macOS, use system Accelerate; on Linux/Windows, use OpenBLAS
openblas = ["linalg", "dep:openblas-src", "dep:blas-src"]  # Force OpenBLAS (Linux/Windows)
intel-mkl = ["linalg", "dep:intel-mkl-src"]  # Force Intel MKL
netlib = ["linalg", "dep:blas-src"]  # Force Reference Netlib
accelerate = ["linalg"]  # Use system BLAS (typically Accelerate on macOS)
array_protocol = []  # Array Protocol for third-party array implementations
array_protocol_jit = ["array_protocol", "cranelift-module", "cranelift-jit", "cranelift-frontend"]  # JIT compilation for Array Protocol
array_protocol_gpu = ["array_protocol", "gpu"]  # GPU support for Array Protocol
array_protocol_cuda = ["array_protocol_gpu", "cuda"]  # CUDA support for Array Protocol
array_protocol_opencl = ["array_protocol_gpu", "opencl"]  # OpenCL support for Array Protocol
array_protocol_metal = ["array_protocol_gpu", "metal"]  # Metal support for Array Protocol
array_protocol_wgpu = ["array_protocol_gpu", "wgpu"]  # WebGPU support for Array Protocol
array_protocol_rocm = ["array_protocol_gpu", "rocm"]  # ROCm support for Array Protocol
array_protocol_distributed = ["array_protocol", "parallel"]  # Distributed computing for Array Protocol
array_protocol_all = ["array_protocol", "array_protocol_jit", "array_protocol_cuda", "array_protocol_distributed"]  # All Array Protocol features
# Production-level features for enterprise deployments
observability = ["serde", "serde_json"]  # Observability infrastructure (tracing, audit logging)
observability_http = ["observability", "reqwest"]  # HTTP export for observability
versioning = ["serde", "serde_json"]  # API versioning and compatibility management
leak_detection = ["memory_management", "serde", "serde_json"]  # Memory leak detection system
data_validation = ["validation", "serde", "serde_json", "regex"]  # Comprehensive data validation
s3 = []  # S3 integration for remote storage
crypto = []  # Cryptographic features (placeholder)
compression = ["flate2"]  # Compression support
database = []  # Database integration features
production = ["observability", "versioning", "leak_detection", "data_validation"]  # All production features
all = [
    "simd", "parallel", "cache", "validation", "logging",
    "gpu", "cuda", "memory_management", "memory_efficient", "memory_compression",
    "array", "profiling", "random", "types", "ufuncs", "testing", "benchmarking",
    "array_protocol_all", "production"
]  # Enable all features except mutually exclusive BLAS backends
# NOTE: BLAS backends (openblas, intel-mkl, netlib) are mutually exclusive
# Use --features openblas (default), --features intel-mkl, or --features netlib

[[example]]
name = "gpu_example"
path = "examples/gpu_example.rs"
required-features = ["gpu"]

[[example]]
name = "gpu_kernel_library"
path = "examples/gpu_kernel_library.rs"
required-features = ["gpu"]

[[example]]
name = "gpu_foundation_example"
path = "examples/gpu_foundation_example.rs"
required-features = ["gpu"]

[[example]]
name = "gpu_detection_example"
path = "examples/gpu_detection_example.rs"
required-features = ["gpu"]

[[example]]
name = "memory_management"
path = "examples/memory_management.rs"
required-features = ["memory_management"]

[[example]]
name = "logging_example"
path = "examples/logging_example.rs"
required-features = ["logging"]

[[example]]
name = "random_example"
path = "examples/random_example.rs"
required-features = ["random"]

[[example]]
name = "profiling_example"
path = "examples/profiling_example.rs"
required-features = ["profiling"]

[[example]]
name = "type_conversion_example"
path = "examples/type_conversion_example.rs"
required-features = ["types"]

[[example]]
name = "integrated_features"
path = "examples/integrated_features.rs"
required-features = ["logging", "profiling", "random", "memory_management", "types"]

[[example]]
name = "memory_metrics_example"
path = "examples/memory_metrics_example.rs"
required-features = ["memory_management"]

[[example]]
name = "memory_metrics_bufferpool"
path = "examples/memory_metrics_bufferpool.rs"
required-features = ["memory_management"]

[[example]]
name = "memory_metrics_chunking"
path = "examples/memory_metrics_chunking.rs"
required-features = ["memory_management"]

[[example]]
name = "memory_metrics_gpu"
path = "examples/memory_metrics_gpu.rs"
required-features = ["memory_management", "memory_metrics", "gpu"]

[[example]]
name = "memory_metrics_snapshots"
path = "examples/memory_metrics_snapshots.rs"
required-features = ["memory_management", "memory_metrics"]

[[example]]
name = "memory_mapped_array"
path = "examples/memory_mapped_array.rs"
required-features = ["memory_efficient"]

[[example]]
name = "memory_mapped_adaptive"
path = "examples/memory_mapped_adaptive.rs"
required-features = ["memory_efficient"]

[[example]]
name = "memory_mapped_chunks"
path = "examples/memory_mapped_chunks.rs"
required-features = ["memory_efficient"]

[[example]]
name = "memory_mapped_compressed"
path = "examples/memory_mapped_compressed.rs"
required-features = ["memory_compression"]

[[example]]
name = "memory_mapped_mutation"
path = "examples/memory_mapped_mutation.rs"
required-features = ["memory_efficient"]

[[example]]
name = "memory_mapped_parallel"
path = "examples/memory_mapped_parallel.rs"
required-features = ["memory_efficient", "parallel"]

[[example]]
name = "memory_mapped_running_stats"
path = "examples/memory_mapped_running_stats.rs"
required-features = ["memory_efficient"]

[[example]]
name = "memory_mapped_simple"
path = "examples/memory_mapped_simple.rs"
required-features = ["memory_efficient"]

[[example]]
name = "memory_mapped_slicing"
path = "examples/memory_mapped_slicing.rs"
required-features = ["memory_efficient"]

[[example]]
name = "memory_mapped_zerocopy"
path = "examples/memory_mapped_zerocopy.rs"
required-features = ["memory_efficient"]

[[example]]
name = "memory_mapped_zerocopy_serialization"
path = "examples/memory_mapped_zerocopy_serialization.rs"
required-features = ["memory_efficient", "serialization", "float32", "float64", "all_ints"]

[[example]]
name = "scientific_arrays_example"
path = "examples/scientific_arrays_example.rs"
required-features = ["array"]

[[example]]
name = "large_dataset_processing"
path = "examples/large_dataset_processing.rs"
required-features = ["memory_efficient", "array", "random"]

[[example]]
name = "ndarray_ufuncs_example"
path = "examples/ndarray_ufuncs_example.rs"
required-features = ["ufuncs"]

[[example]]
name = "advanced_indexing_example"
path = "examples/advanced_indexing_example.rs"

[[example]]
name = "advanced_ndarray_example"
path = "examples/advanced_ndarray_example.rs"
required-features = ["ufuncs"]

[[example]]
name = "ndarray_advanced_operations"
path = "examples/ndarray_advanced_operations.rs"

[[example]]
name = "ndarray_statistical_operations"
path = "examples/ndarray_statistical_operations.rs"

[[example]]
name = "ndarray_correlation_binning"
path = "examples/ndarray_correlation_binning.rs"

[[example]]
name = "memory_mapped_prefetching"
path = "examples/memory_mapped_prefetching.rs"
required-features = ["memory_compression"]

[[example]]
name = "advanced_prefetching_example"
path = "examples/advanced_prefetching_example.rs"
required-features = ["memory_compression"]

[[example]]
name = "array_protocol_operations"
path = "examples/array_protocol_operations.rs"
required-features = ["array_protocol"]

[[example]]
name = "array_protocol_advanced"
path = "examples/array_protocol_advanced.rs"
required-features = ["array_protocol"]

[[example]]
name = "array_protocol_backpropagation"
path = "examples/array_protocol_backpropagation.rs"
required-features = ["array_protocol"]

[[example]]
name = "array_protocol_distributed_training"
path = "examples/array_protocol_distributed_training.rs"
required-features = ["array_protocol_distributed"]

[[example]]
name = "array_protocol_gpu"
path = "examples/array_protocol_gpu.rs"
required-features = ["array_protocol_cuda"]

[[example]]
name = "custom_array_protocol"
path = "examples/custom_array_protocol.rs"
required-features = ["array_protocol"]

[[example]]
name = "progress_visualization_example"
path = "examples/progress_visualization_example.rs"
required-features = ["logging"]

[[example]]
name = "gpu_kernel_comprehensive_example"
path = "examples/gpu_kernel_comprehensive_example.rs"
required-features = ["gpu"]

[[example]]
name = "batch_conversions_example"
path = "examples/batch_conversions_example.rs"
required-features = ["types"]

[[example]]
name = "enhanced_memory_metrics_example"
path = "examples/enhanced_memory_metrics_example.rs"
required-features = ["memory_management"]

[[example]]
name = "core_memory_efficient_example"
path = "examples/core_memory_efficient_example.rs"
required-features = ["memory_efficient"]

[[example]]
name = "advanced_error_handling"
path = "examples/advanced_error_handling.rs"
required-features = []

[[example]]
name = "leak_detection_demo"
path = "examples/leak_detection_demo.rs"
required-features = ["leak_detection"]

[[example]]
name = "adaptive_optimization_test"
path = "examples/adaptive_optimization_test.rs"
required-features = ["profiling"]

[[example]]
name = "coverage_analysis_demo"
path = "examples/coverage_analysis_demo.rs"
required-features = ["profiling"]

[[example]]
name = "production_profiling_demo"
path = "examples/production_profiling_demo.rs"
required-features = ["profiling"]

[[example]]
name = "adaptive_optimization_demo"
path = "examples/adaptive_optimization_demo.rs"
required-features = ["profiling"]

[[example]]
name = "performance_dashboards_demo"
path = "examples/performance_dashboards_demo.rs"
required-features = ["profiling"]

[[example]]
name = "pattern_recognition_example"
path = "examples/pattern_recognition_example.rs"
required-features = ["memory_efficient"]


[[bench]]
name = "array_protocol_bench"
harness = false

[[bench]]
name = "validation_bench"
harness = false

[[bench]]
name = "pattern_recognition_bench"
harness = false

[[bench]]
name = "numpy_scipy_comparison_bench"
harness = false

[[bench]]
name = "simple_array_bench"
harness = false

[[example]]
name = "parallel_ops_example"
path = "examples/parallel_ops_example.rs"
required-features = ["parallel"]
